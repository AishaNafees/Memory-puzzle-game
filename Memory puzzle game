import pygame
import cv2
import random
import os


class Tile(pygame.sprite.Sprite):
    def __init__(self, filename, x, y):
        super().__init__()

        self.name = filename.split(".")[0]
        self.original_image = pygame.image.load(
            'C:/Users/babug/Downloads/project pygame/imgs/' + filename)
        self.back_image = pygame.image.load(
            'C:/Users/babug/Downloads/project pygame/imgs/' + filename)
        self.original_image = pygame.transform.scale(
            self.original_image, (100, 50))  # Resize image
        self.back_image = pygame.Surface(self.original_image.get_size())
        pygame.draw.rect(self.back_image, white, self.back_image.get_rect())

        self.image = self.back_image
        self.rect = self.image.get_rect(topleft=(x, y))
        self.shown = False

    def update(self):
        self.image = self.original_image if self.shown else self.back_image

    def show(self):
        self.shown = True

    def hide(self):
        self.shown = False


class Game():
    def __init__(self):
        self.level = 1
        self.level_complete = False

        self.all_fruits = [f for f in os.listdir(
            "C:/Users/babug/Downloads/project pygame/imgs/") if os.path.join("C:/Users/babug/Downloads/project pygame/imgs/", f)]
        self.img_width, self.img_height = (180, 60)

        # fruits
        self.padding = 20
        self.margin_top = 120
        self.cols = 4
        self.rows = 2
        self.width = 1280
        self.tiles_group = pygame.sprite.Group()
        self.flipped = []
        self.frame_count = 0
        self.block_game = False

        # generate first level
        self.generate_level(self.level)

    def update(self, event_list):
        self.user_input(event_list)
        self.draw()
        self.check_level_complete(event_list)

    def check_level_complete(self, event_list):
        if not self.block_game:
            for event in event_list:
                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                    for tile in self.tiles_group:
                        if tile.rect.collidepoint(event.pos):
                            self.flipped.append(tile.name)
                            tile.show()
                            if len(self.flipped) == 2:
                                if self.flipped[0] != self.flipped[1]:
                                    self.block_game = True
                                else:
                                    self.flipped = []
                                    self.level_complete = all(
                                        tile.shown for tile in self.tiles_group)
        else:
            self.frame_count += 1
            if self.frame_count == FPS:
                self.frame_count = 0
                self.block_game = False

                for tile in self.tiles_group:
                    if tile.name in self.flipped:
                        tile.hide()
                self.flipped = []

    def generate_level(self, level):
        self.fruits = self.select_random_fruits(self.level)
        self.level_complete = False
        self.rows = self.level + 1
        self.cols = 4
        self.generate_tileset(self.fruits)

    def generate_tileset(self, fruits):
        self.cols = 4  # Fixed number of columns
        # Calculate required rows
        self.rows = (len(fruits) + self.cols - 1) // self.cols
        tiles_width = self.img_width * self.cols + \
            self.padding * (self.cols - 1)
        left_margin = (self.width - tiles_width) // 2

        self.tiles_group.empty()

        for i in range(len(fruits)):
            x = 160 + (i % self.cols) * (self.img_width + self.padding)
            y = 200 + (i // self.cols) * (self.img_height + self.padding)
            tile = Tile(fruits[i], x, y)
            self.tiles_group.add(tile)

    def select_random_fruits(self, level):
        fruits = random.sample(self.all_fruits, (self.level + self.level + 2))
        fruits_copy = fruits.copy()
        fruits.extend(fruits_copy)
        random.shuffle(fruits)
        return fruits

    def user_input(self, event_list):
        for event in event_list:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and self.level_complete:
                    self.level += 1
                    if self.level >= 6:
                        self.level = 1
                    self.generate_level(self.level)

    def draw(self):
        screen.fill(Black)
        # fonts
        title_font = pygame.font.SysFont("None", 50, bold=True)
        txt_font = pygame.font.SysFont("None", 30, italic=True)
        # texts
        title_txt = title_font.render("Memory Puzzle!", True, white)
        title_rect = title_txt.get_rect(midtop=(game_Width//2, 10))
        screen.blit(title_txt, title_rect)

        level_txt = txt_font.render("Level " + str(self.level), True, white)
        level_rect = level_txt.get_rect(midtop=(game_Width//2, 80))
        screen.blit(level_txt, level_rect)

        info_txt = txt_font.render("Find 2 of each ", True, white)
        info_rect = info_txt.get_rect(midtop=(game_Width//2, 120))
        screen.blit(info_txt, info_rect)

        if not self.level == 5:
            nxt_txt = txt_font.render(
                "Level complete.Press Space for next level.", True, white)

        else:
            nxt_txt = txt_font.render(
                "Congrats!You Won.Press Space to Play Again.", True, white)

        nxt_rect = nxt_txt.get_rect(midtop=(game_Width//2, 160))
        self.tiles_group.draw(screen)
        self.tiles_group.update()

        if self.level_complete:
            screen.blit(nxt_txt, nxt_rect)


pygame.init()  # initializes program used to start program without errors

# screensetup
game_Width = 1000
game_Height = 730
screen = pygame.display.set_mode((game_Width, game_Height))
pygame.display.set_caption('Memory Puzzle')
white = (255, 255, 255)
Black = (0, 0, 0)
rosybrown = (188, 143, 143)
gray = (128, 128, 128)

clock = pygame.time.Clock()
FPS = 60

game = Game()
game_Loop = True
while game_Loop:
    game_list = pygame.event.get()

    for event in game_list:
        if event.type == pygame.QUIT:
            game_Loop = False

    game.update(game_list)

    pygame.display.update()  # updates everytime new function is added
    clock.tick(FPS)


pygame.quit()
